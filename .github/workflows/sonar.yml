name: SonarQube Scan

on:
  workflow_call:

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download path files
        uses: actions/download-artifact@v4
        with:
          name: paths

      - name: Read affected lib from coverage-directories.txt
        id: set-matrix
        run: |
          if [ -s coverage-directories.txt ]; then
            # This step creates a matrix containing the names of the affected libraries found in the reports directory. These names were previously identified and written to a file by the pathfinder-lcov-normalizer

            # Read the contents of coverage-directories.txt into a JSON array
            # Each line in the file becomes an element in the array
            # -R: read raw strings
            # -s: read the entire input as a single string
            # -c: compact output (JSON array)
            # map(select(length > 0)): remove empty lines
            matrix=$(cat coverage-directories.txt | jq -R -s -c 'split("\n") | map(select(length > 0))')

          else 
          matrix='["__empty__"]'
          fi

          # Export the result as a GitHub Actions output variable named "matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  sonar-scan:
    needs: set-matrix
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.set-matrix.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4

      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          name: package

      - name: Run SonarCloud Scan
        if: matrix.path != '__empty__'
        uses: ./.github/actions/sonarcloud-scan
        with:
          path: ${{matrix.path}}
