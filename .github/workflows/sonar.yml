name: SonarQube Scan

on:
  workflow_call:

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download path files
        uses: actions/download-artifact@v4
        with:
          name: paths

      - name: Read affected lib from coverage-directories.txt
        id: set-matrix
        run: |
          if [ -s coverage-directories.txt ]; then

            # This step creates a matrix containing the names of the affected libraries found in the reports directory. These names were previously identified and written to a file by the pathfinder-lcov-normalizer
            # Read the contents of coverage-directories.txt into a JSON array
            # Each line in the file becomes an element in the array
            # -R: read raw strings
            # -s: read the entire input as a single string
            # -c: compact output (JSON array)
            # map(select(length > 0)): remove empty lines
            matrix=$(cat coverage-directories.txt | jq -R -s -c 'split("\n") | map(select(length > 0))')
            run_scan=true
          else
            matrix='[]'
            run_scan=false
          fi
          # Export the result as a GitHub Actions output variable named "matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

          # Export a flag indicating whether the scan job should run (true if the file is not empty)
          echo "run_scan=$run_scan" >> $GITHUB_OUTPUT

  sonar-scan:
    needs: set-matrix
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.set-matrix.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: 'https://sonarcloud.io'
        with:
          projectBaseDir: libs/${{ matrix.path }}/
          args: >
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}_${{ matrix.path }}
            -Dsonar.host.url=$SONAR_URL
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.scm.disabled=true
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.javascript.coveragePlugin=lcov
            -Dsonar.javascript.lcov.reportPaths=../../reports/${{ matrix.path }}/coverage/lcov.info
            -Dsonar.testExecutionReportPaths=../../reports/${{ matrix.path }}/sonarqube_report.xml
            -Dsonar.working.directory=../../reports/${{ matrix.path }}/.scannerwork
            -Dsonar.coverage.exclusions=**/*.ts,**/*.js,**/*.module.ts,**/*.main.ts,**/environments/**,**/assets/**,**/generated/**,**/*.stories.ts,**/*.harness 
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
