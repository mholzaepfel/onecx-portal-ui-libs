name: 'Docker Image Pre-pull'
description: 'Pre-pull Docker images for integration tests'
inputs:
  env-file-path:
    description: 'Path to the env.ts file containing image definitions'
    default: 'libs/integration-tests/src/lib/config/env.ts'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Extract and pull Docker images
      run: |
        # Extract image names from env.ts file
        ENV_FILE="${{ inputs.env-file-path }}"

        echo "Extracting Docker images from $ENV_FILE..."

        # Extract base images
        POSTGRES_IMAGE=$(grep "export const POSTGRES" "$ENV_FILE" | sed "s/.*= *['\"]//; s/['\"].*//")
        KEYCLOAK_IMAGE=$(grep "export const KEYCLOAK" "$ENV_FILE" | sed "s/.*= *['\"]//; s/['\"].*//")

        echo "Base images found:"
        echo "  POSTGRES: $POSTGRES_IMAGE"
        echo "  KEYCLOAK: $KEYCLOAK_IMAGE"

        # Extract OneCX images from both objects
        SVC_IMAGES=$(grep -A 20 "export const onecxSvcImages" "$ENV_FILE" | \
                    grep "ONECX_.*:" | \
                    sed "s/.*\`\${DOCKER_REPO}\/\([^:]*:[^']*\)\`.*/ghcr.io\/onecx\/\1/" | \
                    sed "s/.*\${DOCKER_REPO}\/\([^:]*:[^']*\).*/ghcr.io\/onecx\/\1/")

        SHELL_IMAGES=$(grep -A 10 "export const onecxShellUiImages" "$ENV_FILE" | \
                      grep "ONECX_.*:" | \
                      sed "s/.*\`\${DOCKER_REPO}\/\([^:]*:[^']*\)\`.*/ghcr.io\/onecx\/\1/" | \
                      sed "s/.*\${DOCKER_REPO}\/\([^:]*:[^']*\).*/ghcr.io\/onecx\/\1/")

        ONECX_IMAGES=$(echo -e "$SVC_IMAGES\n$SHELL_IMAGES" | grep -v "^$")

        echo "OneCX images found:"
        echo "$ONECX_IMAGES"

        # Create a list of all images to pull
        ALL_IMAGES=""
        [ -n "$POSTGRES_IMAGE" ] && ALL_IMAGES="$POSTGRES_IMAGE"
        [ -n "$KEYCLOAK_IMAGE" ] && ALL_IMAGES="$ALL_IMAGES $KEYCLOAK_IMAGE"
        ALL_IMAGES="$ALL_IMAGES $ONECX_IMAGES"

        echo "Starting parallel image pulls..."

        # Pull images in parallel for faster execution
        echo "$ALL_IMAGES" | tr ' ' '\n' | grep -v '^$' | xargs -I {} -P 4 sh -c '
          echo "Pulling {}..."
          if docker pull "{}"; then
            echo "✅ Successfully pulled {}"
          else
            echo "❌ Failed to pull {}"
          fi
        '

        echo "All image pulls completed. Current Docker images:"
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedSince}}"
      shell: bash
